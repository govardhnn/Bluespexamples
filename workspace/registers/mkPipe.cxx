/*
 * Generated by Bluespec Compiler, version 2023.01-23-g764b7230 (build 764b7230)
 * 
 * On Tue Sep 12 11:38:22 IST 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkPipe.h"


/* String declarations */
static std::string const __str_literal_1("x1, x2, x3, x4 = %0h, %0h, %0h, %0h", 35u);


/* Constructor */
MOD_mkPipe::MOD_mkPipe(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_x1(simHdl, "x1", this, 32u),
    INST_x2(simHdl, "x2", this, 32u),
    INST_x3(simHdl, "x3", this, 32u),
    INST_x4(simHdl, "x4", this, 32u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 6u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkPipe::init_symbols_0()
{
  init_symbol(&symbols[0u], "RL_r1", SYM_RULE);
  init_symbol(&symbols[1u], "RL_show", SYM_RULE);
  init_symbol(&symbols[2u], "x1", SYM_MODULE, &INST_x1);
  init_symbol(&symbols[3u], "x2", SYM_MODULE, &INST_x2);
  init_symbol(&symbols[4u], "x3", SYM_MODULE, &INST_x3);
  init_symbol(&symbols[5u], "x4", SYM_MODULE, &INST_x4);
}


/* Rule actions */

void MOD_mkPipe::RL_r1()
{
  tUInt32 DEF_x2_PLUS_1___d4;
  tUInt32 DEF_x1_PLUS_1___d2;
  tUInt32 DEF_x3_PLUS_1___d6;
  DEF_b__h232 = INST_x3.METH_read();
  DEF_b__h182 = INST_x1.METH_read();
  DEF_b__h219 = INST_x2.METH_read();
  DEF_x3_PLUS_1___d6 = DEF_b__h232 + 1u;
  DEF_x1_PLUS_1___d2 = DEF_b__h182 + 1u;
  DEF_x2_PLUS_1___d4 = DEF_b__h219 + 1u;
  INST_x2.METH_write(DEF_x1_PLUS_1___d2);
  INST_x3.METH_write(DEF_x2_PLUS_1___d4);
  INST_x4.METH_write(DEF_x3_PLUS_1___d6);
}

void MOD_mkPipe::RL_show()
{
  tUInt32 DEF_signed_x2___d8;
  tUInt32 DEF_signed_x1___d7;
  tUInt32 DEF_signed_x3___d9;
  tUInt32 DEF_signed_x4_0___d11;
  DEF_b__h249 = INST_x4.METH_read();
  DEF_signed_x4_0___d11 = DEF_b__h249;
  DEF_b__h232 = INST_x3.METH_read();
  DEF_signed_x3___d9 = DEF_b__h232;
  DEF_b__h182 = INST_x1.METH_read();
  DEF_signed_x1___d7 = DEF_b__h182;
  DEF_b__h219 = INST_x2.METH_read();
  DEF_signed_x2___d8 = DEF_b__h219;
  dollar_display(sim_hdl,
		 this,
		 "s,-32,-32,-32,-32",
		 &__str_literal_1,
		 DEF_signed_x1___d7,
		 DEF_signed_x2___d8,
		 DEF_signed_x3___d9,
		 DEF_signed_x4_0___d11);
}


/* Methods */

void MOD_mkPipe::METH__write(tUInt32 ARG__write_1)
{
  INST_x1.METH_write(ARG__write_1);
}

tUInt8 MOD_mkPipe::METH_RDY__write()
{
  tUInt8 DEF_CAN_FIRE__write;
  tUInt8 PORT_RDY__write;
  DEF_CAN_FIRE__write = (tUInt8)1u;
  PORT_RDY__write = DEF_CAN_FIRE__write;
  return PORT_RDY__write;
}

tUInt32 MOD_mkPipe::METH__read()
{
  tUInt32 PORT__read;
  DEF_b__h249 = INST_x4.METH_read();
  PORT__read = DEF_b__h249;
  return PORT__read;
}

tUInt8 MOD_mkPipe::METH_RDY__read()
{
  tUInt8 DEF_CAN_FIRE__read;
  tUInt8 PORT_RDY__read;
  DEF_CAN_FIRE__read = (tUInt8)1u;
  PORT_RDY__read = DEF_CAN_FIRE__read;
  return PORT_RDY__read;
}


/* Reset routines */

void MOD_mkPipe::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkPipe::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkPipe::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_x1.dump_state(indent + 2u);
  INST_x2.dump_state(indent + 2u);
  INST_x3.dump_state(indent + 2u);
  INST_x4.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkPipe::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 9u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h182", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h219", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h232", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h249", 32u);
  num = INST_x1.dump_VCD_defs(num);
  num = INST_x2.dump_VCD_defs(num);
  num = INST_x3.dump_VCD_defs(num);
  num = INST_x4.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkPipe::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkPipe &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkPipe::vcd_defs(tVCDDumpType dt, MOD_mkPipe &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_b__h182) != DEF_b__h182)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h182, 32u);
	backing.DEF_b__h182 = DEF_b__h182;
      }
      ++num;
      if ((backing.DEF_b__h219) != DEF_b__h219)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h219, 32u);
	backing.DEF_b__h219 = DEF_b__h219;
      }
      ++num;
      if ((backing.DEF_b__h232) != DEF_b__h232)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h232, 32u);
	backing.DEF_b__h232 = DEF_b__h232;
      }
      ++num;
      if ((backing.DEF_b__h249) != DEF_b__h249)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h249, 32u);
	backing.DEF_b__h249 = DEF_b__h249;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_b__h182, 32u);
      backing.DEF_b__h182 = DEF_b__h182;
      vcd_write_val(sim_hdl, num++, DEF_b__h219, 32u);
      backing.DEF_b__h219 = DEF_b__h219;
      vcd_write_val(sim_hdl, num++, DEF_b__h232, 32u);
      backing.DEF_b__h232 = DEF_b__h232;
      vcd_write_val(sim_hdl, num++, DEF_b__h249, 32u);
      backing.DEF_b__h249 = DEF_b__h249;
    }
}

void MOD_mkPipe::vcd_prims(tVCDDumpType dt, MOD_mkPipe &backing)
{
  INST_x1.dump_VCD(dt, backing.INST_x1);
  INST_x2.dump_VCD(dt, backing.INST_x2);
  INST_x3.dump_VCD(dt, backing.INST_x3);
  INST_x4.dump_VCD(dt, backing.INST_x4);
}
