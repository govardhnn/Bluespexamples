//
// Generated by Bluespec Compiler, version 2023.01-23-g764b7230 (build 764b7230)
//
// On Fri Aug 18 14:28:25 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// RDY_request_put                O     1
// response_get                   O    16 reg
// RDY_response_get               O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// request_put                    I     4
// EN_request_put                 I     1
// EN_response_get                I     1
//
// Combinational paths from inputs to outputs:
//   EN_response_get -> RDY_request_put
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkFibServerROM4(CLK,
		       RST_N,

		       request_put,
		       EN_request_put,
		       RDY_request_put,

		       EN_response_get,
		       response_get,
		       RDY_response_get);
  input  CLK;
  input  RST_N;

  // action method request_put
  input  [3 : 0] request_put;
  input  EN_request_put;
  output RDY_request_put;

  // actionvalue method response_get
  input  EN_response_get;
  output [15 : 0] response_get;
  output RDY_response_get;

  // signals for module outputs
  wire [15 : 0] response_get;
  wire RDY_request_put, RDY_response_get;

  // ports of submodule fibserver_result_fifo
  reg [15 : 0] fibserver_result_fifo$D_IN;
  wire [15 : 0] fibserver_result_fifo$D_OUT;
  wire fibserver_result_fifo$CLR,
       fibserver_result_fifo$DEQ,
       fibserver_result_fifo$EMPTY_N,
       fibserver_result_fifo$ENQ,
       fibserver_result_fifo$FULL_N;

  // action method request_put
  assign RDY_request_put = fibserver_result_fifo$FULL_N ;

  // actionvalue method response_get
  assign response_get = fibserver_result_fifo$D_OUT ;
  assign RDY_response_get = fibserver_result_fifo$EMPTY_N ;

  // submodule fibserver_result_fifo
  FIFOL1 #(.width(32'd16)) fibserver_result_fifo(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(fibserver_result_fifo$D_IN),
						 .ENQ(fibserver_result_fifo$ENQ),
						 .DEQ(fibserver_result_fifo$DEQ),
						 .CLR(fibserver_result_fifo$CLR),
						 .D_OUT(fibserver_result_fifo$D_OUT),
						 .FULL_N(fibserver_result_fifo$FULL_N),
						 .EMPTY_N(fibserver_result_fifo$EMPTY_N));

  // submodule fibserver_result_fifo
  always@(request_put)
  begin
    case (request_put)
      4'd0: fibserver_result_fifo$D_IN = 16'd0;
      4'd1, 4'd2: fibserver_result_fifo$D_IN = 16'd1;
      4'd3: fibserver_result_fifo$D_IN = 16'd2;
      4'd4: fibserver_result_fifo$D_IN = 16'd3;
      4'd5: fibserver_result_fifo$D_IN = 16'd5;
      4'd6: fibserver_result_fifo$D_IN = 16'd8;
      4'd7: fibserver_result_fifo$D_IN = 16'd13;
      4'd8: fibserver_result_fifo$D_IN = 16'd21;
      4'd9: fibserver_result_fifo$D_IN = 16'd34;
      4'd10: fibserver_result_fifo$D_IN = 16'd55;
      4'd11: fibserver_result_fifo$D_IN = 16'd89;
      4'd12: fibserver_result_fifo$D_IN = 16'd144;
      4'd13: fibserver_result_fifo$D_IN = 16'd233;
      4'd14: fibserver_result_fifo$D_IN = 16'd377;
      4'd15: fibserver_result_fifo$D_IN = 16'd610;
    endcase
  end
  assign fibserver_result_fifo$ENQ = EN_request_put ;
  assign fibserver_result_fifo$DEQ = EN_response_get ;
  assign fibserver_result_fifo$CLR = 1'b0 ;
endmodule  // mkFibServerROM4

